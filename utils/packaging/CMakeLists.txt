include(cmake/GenerateVersion.cmake)

# INSTALL

include(GNUInstallDirs)

# create and install lvim shim

if(PACKAGE_FOR_WINDOWS OR WIN32)
  set(LVIM_BIN_NAME lvim.ps1)
else()
  set(LVIM_BIN_NAME lvim)
endif()

file(READ ${CMAKE_CURRENT_LIST_DIR}/assets/${LVIM_BIN_NAME} FILE_CONTENTS)
string(REPLACE "CMAKE_INSTALL_DATAROOTDIR" "${CMAKE_INSTALL_DATAROOTDIR}" FILE_CONTENTS "${FILE_CONTENTS}")
file(WRITE ${CMAKE_BINARY_DIR}/bin/${LVIM_BIN_NAME} "${FILE_CONTENTS}")

install(PROGRAMS ${CMAKE_BINARY_DIR}/bin/${LVIM_BIN_NAME} DESTINATION ${CMAKE_INSTALL_BINDIR})

# install the rest of the files
install(FILES ${CMAKE_SOURCE_DIR}/init.lua DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/lunarvim)
install(DIRECTORY 
  ${CMAKE_SOURCE_DIR}/lua
  ${CMAKE_SOURCE_DIR}/utils
  ${CMAKE_SOURCE_DIR}/snapshots 
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/lunarvim
  PATTERN "lua/lvim/utils/git.lua" EXCLUDE)

# install desktop file
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  install(
    FILES ${CMAKE_SOURCE_DIR}/utils/desktop/lvim.desktop
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/applications)
  install(
    FILES ${CMAKE_SOURCE_DIR}/utils/desktop/48x48/lvim.svg
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/48x48/apps)
  install(
    FILES ${CMAKE_SOURCE_DIR}/utils/desktop/64x64/lvim.svg
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/scalable/apps)
  install(
    FILES ${CMAKE_SOURCE_DIR}/utils/desktop/64x64/lvim.svg
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/256x256/apps)
endif()

# bake the lvim version into the code  TODO: find a better way to do this
file(READ ${CMAKE_SOURCE_DIR}/lua/lvim/utils/git.lua FILE_CONTENTS)
string(REPLACE 
  "local current_branch = M.get_lvim_branch()"
  "-- this was generated by cmake
  if true then
    return \"${LVIM_VERSION}\"
  end"
  FILE_CONTENTS "${FILE_CONTENTS}")
file(WRITE ${CMAKE_BINARY_DIR}/git.lua "${FILE_CONTENTS}")
install(FILES 
  ${CMAKE_BINARY_DIR}/git.lua
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/lunarvim/lua/lvim/utils/)

# disable updater
file(READ ${CMAKE_SOURCE_DIR}/lua/lvim/bootstrap.lua FILE_CONTENTS)
string(REPLACE 
  "function M:update()"
  "function M:update()
  -- this was generated by cmake
  if true then
    vim.notify(\"Update functionality is disabled in this lvim build.\", vim.log.levels.WARN)
    return
  end"
  FILE_CONTENTS "${FILE_CONTENTS}")
file(WRITE ${CMAKE_BINARY_DIR}/bootstrap.lua "${FILE_CONTENTS}")
install(FILES 
  ${CMAKE_BINARY_DIR}/bootstrap.lua
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/lunarvim/lua/)

option(BUNDLE_PLUGINS "Bundle core plugins during the build, requires nvim to be installed" OFF)
if(BUNDLE_PLUGINS)
  include(cmake/BundlePlugins.cmake)
endif()

include(cmake/Packaging.cmake)
